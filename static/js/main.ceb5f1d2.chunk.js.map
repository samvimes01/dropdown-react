{"version":3,"sources":["Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","options","elements","filter","prop","id","selected","map","react_default","a","createElement","key","value","className","classList","e","join","onClick","handleSelect","text","closed","handleClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","prevState","find","el","randId","randomstring","generate","bind","state","src_Dropdown","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAmCeA,MAjCR,SAAkBC,GACvB,IAAMC,EAAUD,EAAME,SACnBC,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAMM,SAASD,KAC1CE,IAAI,SAAAH,GAAI,OACPI,EAAAC,EAAAC,cAAA,OACEC,IAAKP,EAAKC,GACVO,MAAOR,EAAKQ,MACZC,UAAW,kBAAqBT,EAAKU,WAAaV,EAAKU,UAAUP,IAAI,SAAAQ,GAAC,OAAIA,IAAGC,KAAK,MAAS,IAC3FC,QAAS,kBAAKjB,EAAMkB,aAAad,EAAKC,MAErCD,EAAKe,QAIZ,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YAEbL,EAAAC,EAAAC,cAAA,OACEG,UAAW,aAAeb,EAAMoB,OAAS,SAAW,UACpDH,QAAS,kBAAMjB,EAAMqB,gBAEpBrB,EAAMM,SAASa,KAChBX,EAAAC,EAAAC,cAAA,QAAMG,UAAWb,EAAMoB,OAAS,OAAS,WAG3CZ,EAAAC,EAAAC,cAAA,OAAKG,UAAW,mBAAqBb,EAAMoB,OAAS,eAAiB,iBAClEnB,KC8BMqB,cApDb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1B,KAiBRqB,YAAc,WACZE,EAAKO,SAAS,SAAAC,GAAS,MAAK,CAC1BX,QAASW,EAAUX,WApBJG,EAwBnBL,aAAe,SAACb,GAEdkB,EAAKO,SAAS,SAAAC,GAAS,MACrB,CACEzB,SAAUyB,EAAU7B,SAAS8B,KAAK,SAAAC,GAAE,OAAIA,EAAG5B,KAAOA,IAClDe,QAAQ,MA3BZ,IAAMc,EAASC,IAAaC,SAASC,KAAK,KAAM,GAF/B,OAIjBd,EAAKe,MAAQ,CACXlB,QAAQ,EACRlB,SAAU,CACR,CAAEG,GAAI6B,IAAUtB,MAAO,SAAUO,KAAM,WAAYb,UAAU,GAC7D,CAAED,GAAI6B,IAAUtB,MAAO,SAAUO,KAAM,UACvC,CAAEd,GAAI6B,IAAUtB,MAAO,SAAUO,KAAM,UACvC,CAAEd,GAAI6B,IAAUtB,MAAO,UAAWO,KAAM,WACxC,CAAEd,GAAI6B,IAAUtB,MAAO,QAASE,UAAW,CAAC,iBAAkBK,KAAM,oBAIxEI,EAAKe,MAAMhC,SAAWiB,EAAKe,MAAMpC,SAAS,GAfzBqB,wEAoCjB,OACEf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAC6B,EAAD,CACErC,SAAUwB,KAAKY,MAAMpC,SACrBI,SAAUoB,KAAKY,MAAMhC,SACrBc,OAAQM,KAAKY,MAAMlB,OACnBC,YAAaK,KAAKL,YAClBH,aAAcQ,KAAKR,wBA7CbsB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ceb5f1d2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function Dropdown(props) {\r\n  const options = props.elements\r\n    .filter(prop => prop.id !== props.selected.id)\r\n    .map(prop => (\r\n      <div\r\n        key={prop.id}\r\n        value={prop.value} \r\n        className={'selector-item ' + ((prop.classList && prop.classList.map(e => e).join(' ')) || '')}\r\n        onClick={() =>props.handleSelect(prop.id)}\r\n      >\r\n        {prop.text}\r\n      </div>\r\n  ));\r\n\r\n  return (\r\n    <div className='dropdown'>\r\n      \r\n      <div\r\n        className={'selector ' + (props.closed ? 'closed' : 'opened')}\r\n        onClick={() => props.handleClick()}\r\n      >\r\n        {props.selected.text}\r\n        <span className={props.closed ? 'open' : 'close'}></span>\r\n      </div>\r\n      \r\n      <div className={'selector-items ' + (props.closed ? 'items-closed' : 'items-opened')}>\r\n        {options}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport randomstring from \"randomstring\";\nimport Dropdown from \"./Dropdown\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const randId = randomstring.generate.bind(null, 5);\n\n    this.state = {\n      closed: true,\n      elements: [\n        { id: randId(), value: \"select\", text: \"Dropdown\", selected: true},\n        { id: randId(), value: \"delete\", text: \"Delete\" },\n        { id: randId(), value: \"rename\", text: \"Rename\" },\n        { id: randId(), value: \"preview\", text: \"Preview\" },\n        { id: randId(), value: \"other\", classList: [\"select-footer\"], text: \"Separated link\" }\n      ],\n    };\n    \n    this.state.selected = this.state.elements[0];\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      closed: !prevState.closed, \n    }));\n  };\n\n  handleSelect = (id) => {\n\n    this.setState(prevState => (\n      {\n        selected: prevState.elements.find(el => el.id === id),\n        closed: true,\n      }\n    ));\n    \n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <Dropdown \n            elements={this.state.elements}\n            selected={this.state.selected}\n            closed={this.state.closed}\n            handleClick={this.handleClick}\n            handleSelect={this.handleSelect} \n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}